import java.util.HashMap;

Map<String, String> opCodes = new HashMap<String, String>();


opCodes.put("001", "Ring 1", "A1");
opCodes.put("002", "Ring 2", "A1");
opCodes.put("003", "Ring 3", "A1");
opCodes.put("004", "Ring 4", "A1");
opCodes.put("005", "Ring 5", "A1");
opCodes.put("006", "Sweep", "A1");
opCodes.put("007", "A = Bazooka, B = Spout", "A1");
opCodes.put("008", "Candelabra", "A1");
opCodes.put("009", "A = Front B = back Curtain & Peacock POSSIBLE ISSUE", "B");
opCodes.put("016", "Selected Lights from the table", "E");
opCodes.put("017", "Module #1 lights", "C1/K");
opCodes.put("018", "Module #2 lights", "C1/K");
opCodes.put("019", "Module #3 lights", "C1/K");
opCodes.put("020", "Module #4 lights", "C1/K");
opCodes.put("021", "Module #5 lights", "C1/K");
opCodes.put("022", "Module #6 lights", "C1/K");
opCodes.put("023", "Module #7 lights", "C1/K");
opCodes.put("024", "Back courtain Lights (Green and Yello only)", "C2");
opCodes.put("025", "Peacock Light Group A", "C1/K");
opCodes.put("026", "Peacock Light Group B", "C1/K");
opCodes.put("027", "Peacock Light Group A + B", "C1/K");
opCodes.put("033", "Sweep Together", "D1");
opCodes.put("034", "Sweep Opposite", "D1");
opCodes.put("035", "Sweep to Limit Left and Right", "J");
opCodes.put("036", "Sweep to Limit Left", "J");
opCodes.put("037", "Sweep to Limit Right", "J");
opCodes.put("038", "Sweep Left Speed", "D2");
opCodes.put("039", "Sweep Right Speed", "D2");
opCodes.put("040", "Sweep Left and Right Speed", "D2");
opCodes.put("042", "Sweep type", "D3");
opCodes.put("047", "Mutlicake", "A2");
opCodes.put("048", "Water Modules W1-W6 and Wedding Cake Formation", "A1");
opCodes.put("049", "Module A lights (ODD 1,3,5,7)", "C1/K");
opCodes.put("050", "Module B lights (Even 2,4,6)", "C1/K");
opCodes.put("051", "Module A and B lights", "C1/K");
opCodes.put("054", "Voice", "F");
opCodes.put("055", "Center spout (voice)", "K");
opCodes.put("056", "Front courtain - excludes black center module spots", "K");
opCodes.put("057", "Back Curtain", "K");
opCodes.put("069", "Repeat JUMP water level (Pulse) Sweep Water @0.5 seconds", "H");
opCodes.put("080", "Interchange A and B module formations of water and light", "I");
opCodes.put("085", "Shit or rotate module 1 - 7 lights", "G");
opCodes.put("086", "Set shift timer interval", "Time");
opCodes.put("099", "Off", "M");

opCodes.put("117", "Module 1 (017) All Leds - fade up or down", "L");
opCodes.put("118", "Module 2 (018) All Leds - fade up or down", "L");
opCodes.put("119", "Module 3 (019) All Leds - fade up or down", "L");
opCodes.put("120", "Module 4 (020) All Leds - fade up or down", "L");
opCodes.put("121", "Module 5 (021) All Leds - fade up or down", "L");
opCodes.put("122", "Module 6 (022) All Leds - fade up or down", "L");
opCodes.put("123", "Module 7 (023) All Leds - fade up or down", "L");

opCodes.put("127", "Peacock LED group A & B (027) - fade up or down", "L");
opCodes.put("149", "Peacock A LEDS (049) - fade up or down", "L");
opCodes.put("150", "Modules B LEDS (050) - fade up or down", "L");
opCodes.put("155", "Center spout (voice / 055) - fade up or down", "L");
opCodes.put("156", "Front curtain (056) - fade up or down", "L");
opCodes.put("157", "Back curtain (057) - fade up or down)", "L");

//Legacy
opCodes.put("041", "Peacock Light Group B", "C1/K");
opCodes.put("052", "Module A and B lights", "C1/K");
opCodes.put("053", "All lights", "C1/K");

// 501-541, 601-641 not implemented into map



//Data lookup map
Map<String, String> dataTable = new HashMap<String, String>();

dataTable.put("001", "A1");
dataTable.put("002", "A1");
dataTable.put("003", "A1");
dataTable.put("004", "A1");
dataTable.put("005", "A1");
dataTable.put("006", "A1");
dataTable.put("007", "A1");
dataTable.put("008", "A1");
dataTable.put("009", "B");
dataTable.put("016", "E");
dataTable.put("017", "C1/K");
dataTable.put("018", "C1/K");
dataTable.put("019", "C1/K");
dataTable.put("020", "C1/K");
dataTable.put("021", "C1/K");
dataTable.put("022", "C1/K");
dataTable.put("023", "C1/K");
dataTable.put("024", "C2");
dataTable.put("025", "C1/K");
dataTable.put("026", "C1/K");
dataTable.put("027", "C1/K");
dataTable.put("033", "D1");
dataTable.put("034", "D1");
dataTable.put("035", "J");
dataTable.put("036", "J");
dataTable.put("037", "J");
dataTable.put("038", "D2");
dataTable.put("039", "D2");
dataTable.put("040", "D2");
dataTable.put("042", "D3");
dataTable.put("047", "A2");
dataTable.put("048", "A1");
dataTable.put("049", "C1/K");
dataTable.put("050", "C1/K");
dataTable.put("051", "C1/K");
dataTable.put("054", "F");
dataTable.put("055", "K");
dataTable.put("056", "K");
dataTable.put("057", "K");
dataTable.put("069", "H");
dataTable.put("080", "I");
dataTable.put("085", "G");
dataTable.put("086", "Time");
dataTable.put("099", "M");

dataTable.put("117", "L");
dataTable.put("118", "L");
dataTable.put("119", "L");
dataTable.put("120", "L");
dataTable.put("121", "L");
dataTable.put("122", "L");
dataTable.put("123", "L");

dataTable.put("127", "L");
dataTable.put("149", "L");
dataTable.put("150", "L");
dataTable.put("155", "L");
dataTable.put("156", "L");
dataTable.put("157", "L");

//Legacy
dataTable.put("041", "C1/K");
dataTable.put("052", "C1/K");
dataTable.put("053", "C1/K");

// 501-541, 601-641 not implemented into map



//Module water level
Map<String, String> A = new HashMap<String, StringPeacock w();
A.put("000", "Water level off and bypass valve closed");
A.put("001", "Water level 1");
A.put("002", "Water level 2");
A.put("003", "Water level 3");
A.put("004", "Water level 4");
A.put("005", "Water level 5");
A.put("006", "Wedding cake");
A.put("016", "Module A water valves (Odd numberd)");
A.put("032", "Module B water valves (Even numbered)");
A.put("064", "Connect A to B through bypass valve");

//New water levels
Map<String, String> A2 = new HashMap<String, String>();
A2.put("000", "Water level off and bypass valve closed");
A2.put("001", "Water level 1");
A2.put("002", "Water level 2");
A2.put("003", "Water level 3");
A2.put("004", "Water level 4");
A2.put("005", "Water level 5");
A2.put("006", "Wedding cake");
A2.put("016", "Module A water valves (Odd numberd)");
A2.put("032", "Module B water valves (Even numbered)");
A2.put("064", "Connect A to B through bypass valve");

//Courtains and peacock water level
Map<String, String> B = new HashMap<String, String>();
B.put("000", "Peacock water level off and peacock valve closed");
B.put("001", "water level 1");
B.put("002", "water level 2");
B.put("003", "water level 3");
B.put("004", "water level 4");
B.put("005", "water level 5");
B.put("016", "Front curtain water valves);
B.put("032", "Back curtain water valves");
B.put("096", "Peacock on / back curtain off - bypass valve");

//Legacy light Colors
Map<String, String> C1 = new HashMap<String, String>();
C1.put("000", "All colors off");
C1.put("001", "Red");
C1.put("002", "Blue");
C1.put("004", "Amber");
C1.put("008", "White");

//Legacy Light Back Curtain
Map<String, String> C2 = new HashMap<String, String>();
C2.put("000", "All colors off");
C2.put("016", "Green back curtain");
C2.put("032", "Yellow back curtain");

//Sweep speed, Legacy command
Map<String, String> D1 = new HashMap<String, String>();
D1.put("000", "All stop and return to center");
D1.put("001", "Short sweep");
D1.put("002", "Long sweep");
D1.put("008", "Sweep pause");
D1.put("016", "Largo");
D1.put("032", "Adagio");
D1.put("048", "Andante")
D1.put("064", "Moderato");
D1.put("080", "Allegretto");
D1.put("096", "Allegro");
D1.put("102", "Presto");

//Speep speed new
Map<String, String> D2 = new HashMap<String, String>();
D2.put("000", "All stop and return to center");
D2.put("008", "Sweep pause");
D2.put("016", "Largo");
D2.put("032", "Adagio");
D2.put("048", "Andante")
D2.put("064", "Moderato");
D2.put("080", "Allegretto");
D2.put("096", "Allegro");
D2.put("102", "Presto");

//Sweep mode, new command
Map<String, String> D3 = new HashMap<String, String>();
D3.put("000", "Sweep independent");
D3.put("001", "Sweep left and right together");
D3.put("002", "Sweep left and right Opposed");

//Selected special lights
Map<String, String> E = new HashMap<String, String>();
E.put("000", "All off");
E.put("002", "Top of hill - cross/star/anchor - highlight");
E.put("004", "White beacons on end of fountain apron");
E.put("008", "Superceded white modules");

//Cataloged configurations
Map<String, String> F = new HashMap<String, String>();
F.put("000", "All off");
F.put("002", "Voice of the fountain water and lights on");

//Module light shifting
Map<String, String> G = new HashMap<String, String>();
G.put("000", "Stop all shifting and reset");
G.put("001", "Motion to the right");
G.put("002", "Motion to the left");
G.put("016", "Shift without end-carry");
G.put("032", "Shift light with end-carry");
G.put("064", "Repeat shifting at timed interval");

//Module water jump data
Map<String, String> H = new HashMap<String, String>();
H.put("000", "Stop jumping and return to preset");
H.put("006", "Address the sweep water formation");
H.put("016", "Jump A module water level");
H.put("032", "Jump B module water level");
H.put("064", "Jump 0 phase or 1 phase of cycle timers");

//Module water and light exchange pattern
Map<String, String> I = new HashMap<String, String>();
I.put("000", "Stop motion");
I.put("001", "Effect the water setting");
I.put("002", "Effect the light setting");
I.put("016", "Place A configurations into B");
I.put("032", "Place B configurations into C");

//Sweep to limit or between limits
Map<String, String> J = new HashMap<String, String>();
J.put("000", "Hold at center");
J.put("017", "Right long to right very short");
J.put("019", "Hold at right long");
J.put("020", "Right long to center");
J.put("021", "Right long to left very short");
J.put("034", "Hold at Right short")
J.put("051", "Hold at right very short");
J.put("068", "Hold at center");
J.put("085", "Hold at left very short");
J.put("102", "Hold at left short");
J.put("119", "Hold at left long");
J.put("018", "Oscillate at limit at right long");
J.put("035", "Oscillate at limit at right short");
J.put("052", "Oscillate at limit at right very long");
J.put("053", "Oscillate at limit at center");
J.put("069", "Oscillate at limit at left very short");
J.put("086", "Oscillate at limit at left short");
J.put("103", "Oscillate at limit at left long");
J.put("022", "Right long to left short");
J.put("023", "Right long to left long");
J.put("036", "Right short to center");
J.put("037", "Right short to left very short");
J.put("038", "Right short to left short");
J.put("039", "Right short to left long");
J.put("070", "Center to left short");
J.put("071", "Center to left long");
J.put("087", "Left very short to left long");
